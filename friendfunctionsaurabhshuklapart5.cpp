//Overloading of insertion and extraction operator.
#include<iostream>
using namespace std;
class Complex
{
private:
int a,b;
public:
void setdata(int x, int y)
{
    cout<<"The complex no is "<<a<<" +i"<<b<<endl;
}
friend ostream& operator<<(ostream&, Complex&);// OR friend ostream& operator<<(ostream&, Complex);//

friend istream& operator>>(istream &, Complex&);

};
ostream& operator<<(ostream& COUT, Complex& C)
{
    COUT<<C.a<<" +i"<<C.b<<endl;//YAHA HUM COUT DIRECTLY LAGA PAA RAHE HAIN KYONKI SECOND OPERAND INT TYPE KA HAI AUR NA KI COMPLEX TYPE KA.
    return COUT;//WE CAN ALSO WRITE RETURN cout AS COUT HAS THE ADDRESS OF cout SO BOTH ARE SAME. IF ONLY ONE OPERATION I.E. COUT<<C1 IS TO BE DONE THEN WE CAN HAVE RETURN TYPE AS VOID.
}
 istream& operator>>(istream & CIN, Complex& C)
 {
   CIN>>C.a>>C.b;
   return CIN;
 }
/*1.OVERLOADING OF INSERTION AND EXTRACTION OPERATOR CAN BE DONE ONLY BY USING THE OPERATOR AS A FRIEND FUNCTION BECAUSE WE WRITE COUT<<C1 I.E. COUT IS THE CALLER OBJECT AND << IS A FUNCTION IN COUT'S CLASS WHICH IS OSTREAM AND IT IS NOT POSSIBLE TO MAKE A FUNCTION IN A PRE DEFINED CLASS. SO WE TAKE THE HELP OF FRIEND CONCEPT AND PASS COUT AND C1 AS ARGUMENTS.
2.COUT AND CIN ARE PRE DEFINED OBJECTS OF OSTREAM AND ISTREAM CLASSES RESPECTIVELY. BUT WHY ARE WE RETURNING OSTREAM AND ISTREAM? THE ANSWER IS THAT WE HAVE CASES LIKE CIN>>C1>>C2 I.E. TO INPUT C2 , WE NEED CIN AGAIN SO CIN>>C1 RETURNS CIN WHICH THEN BECOMES CIN>>C2 THUS WE ARE RETURNING ISTREAM. IN CASE OF ONLY CIN<<C1, WE CAN RETURN VOID TOO BECAUSE WE DONT NEED CIN FURTHER. ALSO WE NEED TO RETURN ISTREAM & I.E. REFERENCE BECAUSE COUT AND CIN ARE PREDEFINED .
3.IN THE ARGUMENTS, WE PASS THE REFERENCE OF COUT AND CIN BECAUSE THEY ARE PRE DEFINED. ALSO WE PASS COMPLEX REFERENCE IN THE SECOND ARGUMENT AS WE DONT WANT TO MAKE CHANGES IN A COPY INSTEAD WE WANT TO DIRECTLY AFFECT THE ORIGINAL OBJECT I.E. C1.
4.IN CASE OF << FUNCTION WE CAN SKIP REFERENCE IN THE SECOND ARGUMENT AND PASS THE OBJECT DIRECTLY BECAUSE HERE ITS VALUES WILL GET TRANSFERRED.
5.Objects of ostream and istream classes cannot be made.*/









int main(){
    Complex c1;
    cout<<"Enter the complex no"<<endl;
    cin>>c1;// AGAR cin>>5 HOTA TOH 5 INPUT HO JAATA PAR C1 USER DEFINDED DATATYPE HAI ISLIYE OVERLOADING KARNI PAD RAHI HAI. FORMAL WAY >-- operator>>(cin,c1).
    cout<<"The complex no is:"<<endl;
    cout<<c1;
    return 0;
}